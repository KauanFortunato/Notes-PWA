@page "/"
@using Notes.Data
@inject Data.NoteService NoteService

<PageTitle>Notes</PageTitle>

@if (mostrarEditInterface)
{
    <div class="edit-interface overlay">
        <div class="edit-interface-content">
            <h3>Editar Nota</h3>
            <div>
                <label for="title">Titulo:</label>
                <input id="title" @bind="notaSelecionada.Title" />
            </div>
            <div>
                <label for="content">Conteudo:</label>
                <textarea id="content" @bind="notaSelecionada.Content"></textarea>
            </div>
            <button @onclick="SalvarEdicao" type="button" class="btn btn-primary">Salvar</button>
            <button @onclick="EditarInterfaceEsconder" type="button" class="btn btn-secondary">Cancelar</button>
        </div>
    </div>
}

<section class="all-notes-section">
    <div class="all-notes">
        @foreach (var note in notas)
        {
            
            <div class="note-card">

                <div class="note-tools-box">
                    <div class="note-tools">
                        <button @onclick="() => EditarInterfaceMostrar(note)" class="navbar-toggler" type="button">
                            <span class="bi bi-pencil icon-bootstrap small"></span>
                        </button>
                        <button @onclick="() => ExcluirNota(note.Id)"  class="navbar-toggler" type="button">
                            <span class="bi bi-trash3 icon-bootstrap small"></span>
                        </button>
                        <button class="navbar-toggler" type="button">
                            <span class="bi bi-three-dots-vertical icon-bootstrap small"></span>
                        </button>
                    </div>
                </div>

                <h2 class="card-title">
                    <span>@note.Title</span>
                </h2>
                <div class="card-content">
                    <p>
                        @note.Content
                    </p>
                </div>
            </div>
        }
    </div>
</section>

<input @bind="novaNotaTitulo" placeholder="Título da nota..." />
<input @bind="novaNotaConteudo" placeholder="Conteúdo da nota..." />
<button @onclick="AdicionarNota" type="button" class="btn btn-primary">Adicionar Nota</button>

<input @bind="novoWorkspaceTitulo" placeholder="Título da nota..." />
<button @onclick="AdicionarWorkspace" type="button" class="btn btn-primary">Adicionar Workspace</button>


@code {
    private string novaNotaTitulo;
    private string novaNotaConteudo;
    private string novoWorkspaceTitulo;

    private bool mostrarEditInterface = false;
    private Note notaSelecionada = null;

    private List<Note> notas = new List<Note>();
    private List<Workspaces> workspaces = new List<Workspaces>();

    protected override async Task OnInitializedAsync()
    {
        notas = await NoteService.GetAllNotesAsync();
        workspaces = await NoteService.GetAllWorkspaces();
    }

    private async Task AdicionarNota()
    {
        var note = new Note { Title = novaNotaTitulo, Content = novaNotaConteudo };
        await NoteService.AddNoteAsync(note);
        notas = await NoteService.GetAllNotesAsync();
        novaNotaTitulo = string.Empty;
        novaNotaConteudo = string.Empty;
    }

    private async Task ExcluirNota(int id)
    {
        await NoteService.DeleteNoteAsync(id);
        notas = await NoteService.GetAllNotesAsync();
    }

    private async Task SalvarEdicao()
    {
        await NoteService.UpdateNoteAsync(notaSelecionada);
        notas = await NoteService.GetAllNotesAsync();
        EditarInterfaceEsconder();
    }

    private void EditarInterfaceMostrar(Note note)
    {
        notaSelecionada = note;
        mostrarEditInterface = true;
    }

    private async Task EditarInterfaceEsconder()
    {
        mostrarEditInterface = false;
        notaSelecionada = null;
        notas = await NoteService.GetAllNotesAsync();
    }

    private async Task AdicionarWorkspace()
    {
        var workspace = new Workspaces { Name = novoWorkspaceTitulo};
        await NoteService.AddWorkspace(workspace);
        workspaces = await NoteService.GetAllWorkspaces();
        novoWorkspaceTitulo = string.Empty;
    }
}
