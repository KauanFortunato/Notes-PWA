@page "/workspace/{workpaceIdPage:int}"
@using Notes.Data
@using System.Linq
@using Notes.Pages.Components

@inject NavigationManager NavigationManager
@inject HttpClient HttClient
@inject NoteService NoteService
@inject Pages.Services.AppData AppData

<PageTitle>Notes</PageTitle>

<section class="all-notes-section">
    <div class="all-notes-box">
        @if (tipoDeAgrupamento == "data")
        {
            @foreach (var grupo in notasAgrupadasData)
            {
                <h1 class="date-create">
                    <span>
                        @if (grupo.Key.Date == DateTime.Today)
                        {
                            @("Hoje")
                        }
                        else if (grupo.Key.Date == DateTime.Today.AddDays(-1))
                        {
                            @("Ontem")
                        }
                        else if (grupo.Key.Year != DateTime.Today.Year)
                        {
                            @grupo.Key.ToString("yyyy")
                        }
                        else
                        {
                            @($"{grupo.Key:dd} de {grupo.Key:MMMM}")
                        }
                    </span>
                </h1>

                <div class="all-notes">
                    @foreach (var note in grupo)
                    {
                        @if (mostrarEditInterface && note.Id == notaSelecionada.Id)
                        {
                            <div class="note-on-edit" @onclick="SalvarEdicao"></div>
                            <NoteEdit
                                NotaSelecionada="notaSelecionada"
                                OnSave="SalvarEdicao"
                                OnCancel="EsconderInterfaceDeEdicao"/>
                        }
                        else
                        {
                            <NoteCard 
                                Note="note"
                                OnEdit="MostrarInterfaceDeEdicao"
                                OnTask="MostrarInterfaceTask"
                                OnDelete="ExcluirNota" />

                            @if (mostrarTaskInterface && note.Id == notaSelecionada.Id)
                            {
                                <div class="note-on-edit"></div>

                                <NoteAddTask
                                    Note="notaSelecionada"
                                    OnSave="SalvarEdicao"/>
                            }
                        }
                    }
                </div>
            }
        }
        else
        {
            <div class="all-notes">
                @foreach (var note in notasAgrupadasTitulo)
                {
                    @if (mostrarEditInterface && note.Id == notaSelecionada.Id)
                    {
                        <div class="note-on-edit" @onclick="SalvarEdicao"></div>
                        <NoteEdit NotaSelecionada="notaSelecionada"
                                  OnSave="SalvarEdicao"
                                  OnCancel="EsconderInterfaceDeEdicao" />
                    }
                    else
                    {
                        <NoteCard Note="note"
                                  OnEdit="MostrarInterfaceDeEdicao"
                                  OnTask="MostrarInterfaceTask"
                                  OnDelete="ExcluirNota" />
                    }
                }
            </div>
        }
    </div>
</section>

@if (mostrarAddInterface)
{
    <div class="note-on-edit" @onclick="EsconderInterfaceAdicionar"></div>
    <div class="add-note-container">
        <div class="add-note-card">
            <div class="titulo-card">
                <h3>Adicionando nota</h3>
            </div>
            <h2 class="note-title" contenteditable="true" @onblur="() => AtualizarTituloNovaNota()">
            </h2>

            <div class="note-content">
                <p class="note-content content" contenteditable="true" @onblur="() => AtualizarConteudoNovaNota()">
                    
                </p>
            </div>

            <div class="text-edit-options">
                <button class="navbar-toggler" type="button">
                    <span class="bi bi-type-bold icon-bootstrap small"></span>
                </button>
                <button class="navbar-toggler" type="button">
                    <span class="bi bi-type-italic icon-bootstrap small"></span>
                </button>
                <button class="navbar-toggler" type="button">
                    <span class="bi bi-type-strikethrough icon-bootstrap small"></span>
                </button>
                <button class="navbar-toggler" type="button">
                    <span class="bi bi-list-ul icon-bootstrap small"></span>
                </button>
                <button class="navbar-toggler" type="button">
                    <span class="bi bi-list-ol icon-bootstrap small"></span>
                </button>
                <button class="navbar-toggler" type="button">
                    <span class="bi bi-check-square icon-bootstrap small"></span>
                </button>
            </div>

            <div class="add-task-collapse">
                <div class="checkbox-wrapper-15">
                    <input class="inp-cbx" id="cbx-15" type="checkbox" style="display: none;" @onchange="ResetarDeadLine" />

                    <label class="cbx" for="cbx-15">
                        <span>
                            <svg width="12px" height="9px" viewbox="0 0 12 9">
                                <polyline points="1 5 4 8 11 1"></polyline>
                            </svg>
                        </span>
                        <span>Adicionar uma tarefa</span>
                    </label>

                    <div class="task-dateTime">
                        <input type="date" id="deadLine-day" placeholder="Data" @bind-value="deadLine">
                        <input type="time" id="deadLine-hour" placeholder="Horas" @bind-value="deadLine">
                    </div>
                </div>
            </div>

            <div class="edit-note-options">
                <div class="cancel-edit" @onclick="EsconderInterfaceAdicionar">
                    <p>Cancelar</p>
                </div>

                <div class="confirm-edit">
                    <button disabled="@(string.IsNullOrEmpty(novaNotaConteudo))" @onclick="AdicionarNota">OK</button>
                </div>
            </div>
        </div>
    </div>
}

<div id="create-select-buttons">
    <button class="navbar-toggler" type="button">
        <span class="bi bi-check-square icon-bootstrap-select"></span>
    </button>

    <button class="navbar-toggler" type="button" @onclick="MostrarInterfaceAdicionar">
        <span class="bi bi-plus-square icon-bootstrap-add"></span>
    </button>
</div>



@* <input @bind="novoWorkspaceTitulo" placeholder="Título da nota..." />
<button @onclick="AdicionarWorkspace" type="button" class="btn btn-primary">Adicionar Workspace</button>
 *@

@code {
    [Parameter]
    public int WorkpaceIdPage { get; set; }

    #region Variáveis
    private string novaNotaTitulo;
    private string novaNotaConteudo;
    private string novoWorkspaceTitulo;

    private string tipoDeAgrupamento;

    private bool mostrarEditInterface = false;
    private bool mostrarTaskInterface = false;
    private bool mostrarAddInterface = false;

    private Note notaSelecionada = null;
    private DateTime? deadLine = null;

    private List<IGrouping<DateTime, Note>> notasAgrupadasData = new();
    private List<Note> notasAgrupadasTitulo = new();

    private List<Note> notas = new List<Note>();
    private List<Workspace> workspaces = new List<Workspace>();
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await AtualizarNotasAsync();
        await AtualizarWorkspacesAsync();
        AppData.OnChange += AppDataAlterado;
    }

    protected override async Task OnParametersSetAsync()
    {
        await AtualizarNotasAsync();
        await AtualizarWorkspacesAsync();
    }

    #region Notas CRUD
    private async void AppDataAlterado()
    {
        await AtualizarNotasAsync();
        StateHasChanged();
    }

    private async Task AdicionarNota()
    {
        await EsconderInterfaceAdicionar();

        var note = new Note { 
                Title = novaNotaTitulo, 
                Content = novaNotaConteudo, 
                WorkspaceId = WorkpaceIdPage,

                Task = new TaskNote {
                    DeadLine = deadLine
                }
            };

        if(note.Task.DeadLine != null)
        {
            note.Task.Done = false;
        }

        await NoteService.AddNoteAsync(note);
        await AtualizarNotasAsync();
        novaNotaTitulo = string.Empty;
        novaNotaConteudo = string.Empty;
        ResetarDeadLine();
    }

    private async Task ExcluirNota(int id)
    {
        await NoteService.DeleteNoteAsync(id);
        await AtualizarNotasAsync();
    }

    private async Task AtualizarNotasAsync()
    {
        notas = await NoteService.GetAllNotesAsync();
        await AgruparNotas();
    }

    private async Task AgruparNotas()
    {
        tipoDeAgrupamento = await NoteService.GetLocalStorageItem("orderType");
        Console.WriteLine("Tipo de agrupamento local:" + tipoDeAgrupamento);

        if (tipoDeAgrupamento == "data")
        {
            notasAgrupadasData = notas.Where(note => note.WorkspaceId == WorkpaceIdPage)
                                      .OrderByDescending(note => note.CreateDateDateTime())
                                      .GroupBy(note => note.CreateDateDateTime().Date)
                                      .ToList();
        }
        else
        {
            notasAgrupadasTitulo = notas.Where(note => note.WorkspaceId == WorkpaceIdPage)
                                        .OrderBy(note => note.Title).ToList();
        }

    }

    private async Task MostrarInterfaceAdicionar()
    {
        mostrarAddInterface = true;
    }

    private async Task EsconderInterfaceAdicionar()
    {
        mostrarAddInterface = false;
        ResetarDeadLine();
    }

    private async Task AtualizarTituloNovaNota()
    {
        var element = await NoteService.GetElement(".note-title");
        novaNotaTitulo = element;
    }

    private async Task AtualizarConteudoNovaNota()
    {
        var element = await NoteService.GetElement(".note-content.content");
        novaNotaConteudo = element;
    }

    private void ResetarDeadLine()
    {
        deadLine = null;
    }
    #endregion

    #region Edição
    private async Task SalvarEdicao()
    {
        await NoteService.UpdateNoteAsync(notaSelecionada);

        await AtualizarNotasAsync();
        await EsconderInterfaceDeEdicao();
        await EsconderInterfaceTask();
    }

    private void MostrarInterfaceDeEdicao(Note note)
    {
        notaSelecionada = note;
        mostrarEditInterface = true;
    }

    private async Task EsconderInterfaceDeEdicao()
    {
        mostrarEditInterface = false;
        notaSelecionada = null;

        await AtualizarNotasAsync();
    }

    private async Task MostrarInterfaceTask(Note note)
    {
        notaSelecionada = note;
        if (notaSelecionada.Task.Done == null)
        {
            notaSelecionada.Task.Done = false;
            await NoteService.UpdateNoteAsync(notaSelecionada);
        }
        mostrarTaskInterface = true;
    }

    private async Task EsconderInterfaceTask()
    {
        mostrarTaskInterface = false;
        notaSelecionada = null;

        await AtualizarNotasAsync();
    }

    private async Task ConcluirTask()
    {
        notaSelecionada.Task.Done = true;
        await SalvarEdicao();
    }

    private async Task ReabrirTask()
    {
        notaSelecionada.Task.Done = false;
        await NoteService.UpdateNoteAsync(notaSelecionada);
    }

    private async Task RemoverTask()
    {
        notaSelecionada.Task = new TaskNote();
        await SalvarEdicao();
    }

    private async Task AtualizarTitulo()
    {
        var element = await NoteService.GetElement(".card-title.on-edit");
        notaSelecionada.Title = element;
    }

    private async Task AtualizarConteudo()
    {
        var element = await NoteService.GetElement(".card-content .on-edit");
        notaSelecionada.Content = element;
    }
    #endregion

    #region Workspace
        private async Task AtualizarWorkspacesAsync()
        {
            workspaces = await NoteService.GetAllWorkspaces();
        }

        private async Task AdicionarWorkspace()
        {
            var workspace = new Workspace { Name = novoWorkspaceTitulo };
            await NoteService.AddWorkspace(workspace);
            workspaces = await NoteService.GetAllWorkspaces();
            novoWorkspaceTitulo = string.Empty;
        }
    #endregion

    public void Dispose()
    {
        AppData.OnChange -= AppDataAlterado;
    }
}