@page "/workspace/{workpaceIdPage:int}"
@using Notes.Data
@using System.Linq
@using Notes.Pages.Components

@inject NavigationManager NavigationManager
@inject HttpClient HttClient
@inject NoteService NoteService
@inject AppData AppData
@inject QuillService QuillService
@inject FunctionsUseful FunctionsUseful


<PageTitle>Notes</PageTitle>

<section class="all-notes-section">
    <div class="all-notes-box">
        @if (groupingType == "data")
        {
            @foreach (var grupo in notesGroupedDate)
            {
                <h1 class="date-create">
                    <span>
                        @if (grupo.Key.Date == DateTime.Today)
                        {
                            @("Hoje")
                        }
                        else if (grupo.Key.Date == DateTime.Today.AddDays(-1))
                        {
                            @("Ontem")
                        }
                        else if (grupo.Key.Year != DateTime.Today.Year)
                        {
                            @grupo.Key.ToString("yyyy")
                        }
                        else
                        {
                            @($"{grupo.Key:dd} de {grupo.Key:MMMM}")
                        }
                    </span>
                </h1>

                <div class="all-notes">
                    @foreach (var note in grupo)
                    {
                        @if (showEditInterface && note.Id == selectedNote.Id)
                        {
                            <div class="note-on-edit" @onclick="SaveEdit"></div>
                            <NoteEdit
                                NotaSelecionada="selectedNote"
                                OnSave="SaveEdit"
                                OnCancel="HideEditInterface"/>
                        }
                        else
                        {
                            if (selectNotes)
                            {
                                <div class="select-card-box">
                                    <div class="checkbox-wrapper-46 checkbox-note-card">
                                        <input class="inp-cbx" id="cbx-46 note-@note.Id" type="checkbox" checked="@note.IsSelected" @onchange="@(e => SelectNote(note, ((ChangeEventArgs)e).Value))" />
                                        <label class="cbx" for="cbx-46 note-@note.Id">
                                            <span>
                                                <svg width="12px" height="10px" viewbox="0 0 12 10">
                                                    <polyline points="1.5 6 4.5 9 10.5 1"></polyline>
                                                </svg>
                                            </span>
                                        </label>
                                    </div>

                                    <label for="cbx-46 note-@note.Id" class="note-card">
                                        <div class="card-note-content">
                                            <h2 class="card-title">
                                                <span>@note.Title</span>
                                            </h2>
                                        </div>
                                    </label>
                                </div>
                            }
                            else
                            {
                                <NoteCard Note="note"
                                          OnEdit="ShowEditInterface"
                                          OnTask="ShowTaskInterface"
                                          OnDelete="DeleteNote"
                                          OnUpdate="UpdateNote" />

                                @if (showTaskInterface && note.Id == selectedNote.Id)
                                {
                                    <div class="note-on-edit"></div>

                                    <NoteAddTask Note="selectedNote"
                                                 OnSave="SaveEdit" />
                                }
                            }
                        }
                    }
                </div>
            }
        }
        else @*Agrupamento por título*@
        {
            <div class="all-notes">
                @foreach (var note in notesGroupedTitle)
                {
                    @if (showEditInterface && note.Id == selectedNote.Id)
                    {
                        <div class="note-on-edit" @onclick="SaveEdit"></div>
                        <NoteEdit NotaSelecionada="selectedNote"
                                  OnSave="SaveEdit"
                        OnCancel="HideEditInterface" />
                    }
                    else
                    {
                        if (selectNotes)
                        {
                            <div class="select-card-box">
                                <div class="checkbox-wrapper-46 checkbox-note-card">
                                    <input class="inp-cbx" id="cbx-46 note-@note.Id" type="checkbox" checked="@note.IsSelected" @onchange="@(e => SelectNote(note, ((ChangeEventArgs)e).Value))" />
                                    <label class="cbx" for="cbx-46 note-@note.Id">
                                        <span>
                                            <svg width="12px" height="10px" viewbox="0 0 12 10">
                                                <polyline points="1.5 6 4.5 9 10.5 1"></polyline>
                                            </svg>
                                        </span>
                                    </label>
                                </div>

                                <label for="cbx-46 note-@note.Id" class="note-card">
                                    <div class="card-note-content">
                                        <h2 class="card-title">
                                            <span>@note.Title</span>
                                        </h2>
                                    </div>
                                </label>
                            </div>
                        }
                        else
                        {
                            <NoteCard Note="note"
                                      OnEdit="ShowEditInterface"
                                      OnTask="ShowTaskInterface"
                                      OnDelete="DeleteNote"
                                      OnUpdate="UpdateNote" />

                            @if (showTaskInterface && note.Id == selectedNote.Id)
                            {
                                <div class="note-on-edit"></div>

                                <NoteAddTask Note="selectedNote"
                                             OnSave="SaveEdit" />
                            }
                        }
                    }
                }
            </div>
        }
    </div>
</section>

@if (showAddInterface)
{
    <div class="note-on-edit" @onclick="HideAddInterface"></div>
    <div class="add-note-container">
        <div class="add-note-card">
            <div class="titulo-card">
                <h3>Adicionando nota</h3>
            </div>

            <h2 class="note-title" contenteditable="true" @onblur="() => UpdateTitleNewNote()">
                Título
            </h2>

            <div @ref="@divEditorElement" id="divEditorElement"/>

            <div id="toolbar">
                <div class="text-edit-options">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>

                    <div class="color-button"><select class="ql-color"></select></div>
                    <div class="color-button"><select class="ql-background"></select></div>

                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                    <button class="ql-indent" value="-1"></button>
                    <button class="ql-indent" value="+1"></button>
                </div>
            </div>

            <div class="add-task-collapse">
                <div class="checkbox-wrapper-15">
                    <input class="inp-cbx" id="cbx-15" type="checkbox" style="display: none;" @onchange="ResetDeadline" />

                    <label class="cbx" for="cbx-15">
                        <span>
                            <svg width="12px" height="9px" viewbox="0 0 12 9">
                                <polyline points="1 5 4 8 11 1"></polyline>
                            </svg>
                        </span>
                        <span>Adicionar uma tarefa</span>
                    </label>

                    <div class="task-dateTime">
                        <input type="date" id="deadLine-day" placeholder="Data" @bind-value="deadLine">
                        <input type="time" id="deadLine-hour" placeholder="Horas" @bind-value="deadLine">
                    </div>
                </div>
            </div>

            <div class="edit-note-options">
                <div class="cancel-edit" @onclick="HideAddInterface">
                    <p>Cancelar</p>
                </div>

                <div class="confirm-edit">
                    <button disabled id="salvarButton" @onclick="AddNote">OK</button>
                </div>
            </div>
        </div>
    </div>
}

<div id="create-select-buttons">
    <div class="buttons-desktop">
        @if (selectNotes)
        {
            <button class="navbar-toggler" type="button" @onclick="DeleteSelected">
                <span class="bi bi-trash3 icon-bootstrap"></span>
            </button>
        }

        <button class="navbar-toggler" type="button" @onclick="ToggleSelectNote">
            <span class="bi bi-check-square icon-bootstrap-select"></span>
        </button>

        <button class="navbar-toggler" type="button" @onclick="ShowAddInterface">
            <span class="bi bi-plus-square icon-bootstrap-add"></span>
        </button>
    </div>

    <div class="buttons-mobile">
        @if (selectNotes)
        {
            <button class="navbar-toggler" type="button" @onclick="DeleteSelected">
                <span class="bi bi-trash3 icon-bootstrap"></span>
            </button>
        }

        <div class="item-buttons">
            <button class="navbar-toggler" type="button" @onclick="ToggleSelectNote">
                <span class="bi bi-check-square icon-bootstrap-select"></span>
            </button>
            <p>Selecionar</p>
        </div>
            
        <div class="item-buttons">
            <button class="navbar-toggler" type="button" @onclick="ShowAddInterface">
                <span class="bi bi-plus-square icon-bootstrap-add"></span>
                <p>Addicionar</p>
            </button>
        </div>
    </div>
</div>
@* 
<div>
    <p>Tarefas pendentes: @totalTasks</p>
</div> *@

@* <input @bind="novoWorkspaceTitulo" placeholder="Título da nota..." />
<button @onclick="AdicionarWorkspace" type="button" class="btn btn-primary">Adicionar Workspace</button>
 *@

@code {
    [Parameter]
    public int WorkpaceIdPage { get; set; }

    #region Variáveis
    private string newNoteTitle;
    private string newNoteContent;
    private string newWorkspaceTitle;
    private int totalTasks;

    private string groupingType;

    private Note selectedNote = null;
    private DateTime? deadLine = null;

    private List<IGrouping<DateTime, Note>> notesGroupedDate = new();
    private List<Note> notesGroupedTitle = new();
    private List<Note> notesSelected = new();

    private List<Note> notes = new List<Note>();
    private List<Workspace> workspaces = new List<Workspace>();
    #endregion

    #region Variáveis de Controle
    private bool showEditInterface = false;
    private bool showTaskInterface = false;
    private bool showAddInterface = false;
    private bool selectNotes = false;
    private bool render = false;
    #endregion

    #region Variáveis Quill Editor
    private ElementReference divEditorElement;
    private bool EditorEnabled = false;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await UpdateNote();
        await AtualizarWorkspacesAsync();
        AppData.OnChange += AppDataChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateNote();
        await AtualizarWorkspacesAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showAddInterface == true && !render)
        {
            render = true;
            await QuillCreate();
            await QuillService.StartObservation();
        }
        if (firstRender || showAddInterface == false)
        {
            render = false;
        }
    }

    #region Notas CRUD
    private async void AppDataChanged()
    {
        await UpdateNote();
        StateHasChanged();
    }

    private async Task AddNote()
    {
        await HideAddInterface();

        var note = new Note { 
                Title = newNoteTitle, 
                Content = await QuillService.GetEditorContent(divEditorElement),
                WorkspaceId = WorkpaceIdPage,

                Task = new TaskNote {
                    DeadLine = deadLine
                }
            };

        if(note.Task.DeadLine != null)
        {
            note.Task.Done = false;
        }

        await NoteService.AddNoteAsync(note);
        await UpdateNote();
        newNoteTitle = string.Empty;
        newNoteContent = string.Empty;
        ResetDeadline();
    }

    private async Task DeleteNote(int id)
    {
        await NoteService.DeleteNoteAsync(id);
        await UpdateNote();
    }

    private async Task UpdateNote()
    {
        notes = await NoteService.GetAllNotesAsync();
        await GroupNotes();
    }

    private async Task GroupNotes()
    {
        groupingType = await NoteService.GetLocalStorageItem("orderType");

        if (groupingType == "data")
        {
            notesGroupedDate = notes.Where(note => note.WorkspaceId == WorkpaceIdPage)
                                      .OrderByDescending(note => note.CreateDateDateTime())
                                      .GroupBy(note => note.CreateDateDateTime().Date)
                                      .ToList();

            totalTasks = notesGroupedDate
                            .SelectMany(grupo => grupo)
                            .Count(nota => nota.Task.Done == false);
        }
        else
        {
            notesGroupedTitle = notes.Where(note => note.WorkspaceId == WorkpaceIdPage)
                                        .OrderBy(note => note.Title)
                                        .ToList();

            totalTasks = notesGroupedTitle
                            .Count(nota => nota.Task.Done == false);
        }

    }

    private async Task ShowAddInterface()
    {
        showAddInterface = true;
        EditorEnabled = true;
    }

    private async Task HideAddInterface()
    {
        showAddInterface = false;
        EditorEnabled = false;
        ResetDeadline();
    }

    private async Task UpdateTitleNewNote()
    {
        var element = await NoteService.GetElement(".note-title");
        newNoteTitle = element;
    }


    private async Task ToggleSelectNote()
    {
        if (selectNotes)
        {
            selectNotes = false;
            notesSelected.Clear();
        }
        else
        {
            selectNotes = true;
        }
    }

    private void SelectNote(Note note, object value)
    {
        bool isSelected = (bool)value;
        if (isSelected)
        {
            notesSelected.Add(note);
        }
        else
        {
            notesSelected.Remove(note);
        }
    }

    private async Task DeleteSelected()
    {
        foreach (var note in notesSelected)
        {
            await NoteService.DeleteNoteAsync(note.Id);
        }
        notesSelected.Clear();
        await ToggleSelectNote();
        await UpdateNote();
    }

    private void ResetDeadline()
    {
        deadLine = null;
    }
    #endregion

    #region Edição
    private async Task SaveEdit()
    {
        await NoteService.UpdateNoteAsync(selectedNote);

        await UpdateNote();
        await HideEditInterface();
        await HideTaskInterface();
    }

    private void ShowEditInterface(Note note)
    {
        selectedNote = note;
        showEditInterface = true;
    }

    private async Task HideEditInterface()
    {
        showEditInterface = false;
        selectedNote = null;

        await UpdateNote();
    }

    private async Task ShowTaskInterface(Note note)
    {
        selectedNote = note;
        if (selectedNote.Task.Done == null)
        {
            selectedNote.Task.Done = false;
            await NoteService.UpdateNoteAsync(selectedNote);
        }
        showTaskInterface = true;
    }

    private async Task HideTaskInterface()
    {
        showTaskInterface = false;
        selectedNote = null;

        await UpdateNote();
    }

    #endregion

    #region Workspace
    private async Task AtualizarWorkspacesAsync()
    {
        workspaces = await NoteService.GetAllWorkspaces();
    }

    private async Task AdicionarWorkspace()
    {
        var workspace = new Workspace { Name = newWorkspaceTitle };
        await NoteService.AddWorkspace(workspace);
        workspaces = await NoteService.GetAllWorkspaces();
        newWorkspaceTitle = string.Empty;
    }
    #endregion

    #region Quill
    public async Task QuillCreate()
    {
        await QuillService.CreateQuill(divEditorElement);
    }

    #endregion

    public void Dispose()
    {
        AppData.OnChange -= AppDataChanged;
    }
}