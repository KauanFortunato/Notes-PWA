@using Notes.Data
@inject NoteService NoteService


<div class="note-card">
    <div class="note-tools-box">
        <div class="note-tools">
            <button @onclick="() => OnEdit.InvokeAsync(Note)" class="navbar-toggler" type="button">
                <span class="bi bi-pencil icon-bootstrap small"></span>
            </button>
            <button @onclick="() => OnTask.InvokeAsync(Note)" class="navbar-toggler" type="button">
                <span class="bi bi-check2-circle icon-bootstrap small"></span>
            </button>
            <button @onclick="() => OnDelete.InvokeAsync(Note.Id)" class="navbar-toggler" type="button">
                <span class="bi bi-trash3 icon-bootstrap small"></span>
            </button>
            <button class="navbar-toggler" type="button">
                <span class="bi bi-three-dots-vertical icon-bootstrap small"></span>
            </button>
        </div>
    </div>

    @if (Note.Task.Done != null)
    {
        <div class="task-card">
            <div class="checkbox-wrapper-15">
                <input class="inp-cbx" id="cbx-15 @Note.Id" type="checkbox" style="display: none;" checked="@Note.Task.Done" @onchange="ToggleTaskDone" />

                <label class="cbx" for="cbx-15 @Note.Id">
                    <span>
                        <svg width="12px" height="9px" viewbox="0 0 12 9">
                            <polyline points="1 5 4 8 11 1"></polyline>
                        </svg>
                    </span>

                    @if(Note.Task.DeadLine == null)
                    {
                        <span>Estou trabalhando</span>
                    }
                    else
                    {
                        <span>@($"{Note.Task.DeadLine:dd} de {Note.Task.DeadLine:MMMM}")</span>
                    }
                </label>
            </div>
        </div>
    }

    <div class="card-note-content" @onclick="() => OnEdit.InvokeAsync(Note)">
        <h2 class="card-title">
            <span>@Note.Title</span>
        </h2>
        <div class="card-content">
            <p>
                @Note.Content
            </p>
        </div>
    </div>
</div>

@code {
    [Parameter] public Note Note { get; set; } = new Note();

    [Parameter] public EventCallback<Note> OnEdit { get; set; }

    [Parameter] public EventCallback<Note> OnTask { get; set; }

    [Parameter] public EventCallback<int> OnDelete { get; set; }

    [Parameter] public EventCallback OnUpdate { get; set; }

    private async Task ToggleTaskDone(ChangeEventArgs e)
    {
        Note.Task.Done = (bool)e.Value;
        await UpdateNote();
    }

    private async Task UpdateNote()
    {
        await NoteService.UpdateNoteAsync(Note);
        await OnUpdate.InvokeAsync();
    }
}
