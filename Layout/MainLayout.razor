@inherits LayoutComponentBase
@using Notes.Data
@inject NoteService NoteService
@inject AppData AppData
@inject FunctionsUseful FunctionsUseful

<header>
    <div class="top-bar-box">
        <section class="top-bar-section">
            <nav class="toolbar-items">
                <div class="toolbar-item-left">                    
                    <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar" aria-label="Toggle navigation">
                        <span class="bi bi-list icon-bootstrap"></span>
                    </button>

                    <button class="navbar-toggler" type="button">
                        <span class="bi bi-search icon-bootstrap lupa"></span>
                    </button>
                </div>

                <div class="tool-bar-title">
                    <div class="workspace-info">
                        <span class="tool-bar-tile-text">Workspace</span>
                    </div>
                </div>

                <input id="more-button" name="more-button" type="checkbox" />
                <div class="toolbar-item-right">
                    @* <button class="navbar-toggler" type="button" @onclick='() => FunctionsUseful.SetClassItem("all-notes", "all-notes-grid")'>
                        <span class="bi bi-grid-fill icon-bootstrap"></span>
                    </button> *@
                    <label class="visu-tg-box">
                        <input type="checkbox" checked="@visualizationType" @onchange="ToggleVisualization">
                        <span class="bi bi-list-ul icon-bootstrap icon-list"></span>
                        <span class="bi bi-grid-fill icon-bootstrap icon-grid"></span>
                        <span class="slider"></span>
                    </label>

                    <label for="more-button">
                        <span class="bi bi-three-dots-vertical icon-bootstrap"></span>
                    </label>
                </div>
                
                <div class="more-menu-box">
                    <div class="more-menu">
                        <div class="menu-collapse-container">
                            <input id="ordenar-collapse" name="ordenar-collapse" type="checkbox" />
                            <label for="ordenar-collapse" class="more-menu-item">
                                <span class="bi bi-arrow-down-up icon-more-menu"></span>
                                <span class="item-span order">Ordenar<span class="bi bi-caret-down-fill icon-more-menu"></span></span>
                            </label>

                            <div class="menu-collapse-box">
                                <div class="menu-collapse" @onclick='() => AppData.MudarTipoDeAgrupamento("data")'>
                                    <span class="bi bi-calendar-event icon-more-menu"></span>
                                    <span>Por data</span>
                                </div>
                                <div class="menu-collapse" @onclick='() => AppData.MudarTipoDeAgrupamento("titulo")'>
                                    <span class="bi bi-fonts icon-more-menu"></span>
                                    <span>Por titulo</span>
                                </div>
                            </div>
                        </div>

                        <span class="separation"></span>
                        <div class="more-menu-item">
                            <span class="bi bi-gear icon-more-menu"></span>
                            <span class="item-span">Configuração</span>
                        </div>
                    </div>
                </div>
            </nav>
        </section>
    </div>

    <nav class="navbar">
        <div class="container-fluid">
            <div class="offcanvas offcanvas-start side-bar-bootstrap" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasNavbarLabel">Áreas de Trabalho</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>

                <div class="offcanvas-body">
                    <ul class="navbar-nav justify-content-end flex-grow-1 pe-3">
                        <li class="nav-item">
                            @foreach (var workspace in workspaces)
                            {
                                <div class="workspace-info-container">
                                    <div class="workspace-info">
                                        <a class="nav-link active" aria-current="page" href="/workspace/@workspace.Id">@workspace.Name</a>
                                        <button class="btn-more-options" type="button">
                                            <span class="bi bi-three-dots-vertical icon-bootstrap small"></span>
                                        </button>
                                    </div>
                                </div>
                            }
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>
</header>

@Body

@code
{
    private List<Workspace> workspaces = new List<Workspace>();
    private Workspace workspaceSelecionado = null;
    private bool mostrarEditInterface = false;
    private bool visualizationType = false;

    protected override async Task OnInitializedAsync()
    {
        await AtualizarWorkspacesAsync();
    }

    private async Task SalvarEdicao()
    {
        await NoteService.UpdateWorkspace(workspaceSelecionado);
        workspaces = await NoteService.GetAllWorkspaces();
        EsconderInterfaceDeEdicao();
    }

    private void MostrarInterfaceDeEdicao(Workspace workspace)
    {
        workspaceSelecionado = workspace;
        mostrarEditInterface = true;
    }

    private async Task EsconderInterfaceDeEdicao()
    {
        mostrarEditInterface = false;
        workspaceSelecionado = null;
        workspaces = await NoteService.GetAllWorkspaces();
    }

    private async Task AtualizarWorkspacesAsync()
    {
        workspaces = await NoteService.GetAllWorkspaces();
    }

    private async Task ToggleVisualization(ChangeEventArgs e)
    {
        if (!visualizationType)
        {
            await FunctionsUseful.SetClassItem("all-notes", "all-notes-grid");
        }
        else
        {
            await FunctionsUseful.RemoveClassItem("all-notes", "all-notes-grid");
        }

        visualizationType = (bool)e.Value;
    }
}