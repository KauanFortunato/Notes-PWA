@inherits LayoutComponentBase
@using Notes.Data
@using Notes.Pages.Components

@inject NoteService NoteService
@inject AppData AppData
@inject FunctionsUseful FunctionsUseful

<header>
    <div class="top-bar-box">
        <section class="top-bar-section">
            <nav class="toolbar-items">
                <div class="toolbar-item-left">                    
                    <button class="navbar-toggler" onclick="functionsUseful.sidebarActive()">
                        <span class="bi bi-list icon-bootstrap"></span>
                    </button>

                    <div class="search-container">
                        <input id="searchbar" type="text" name="searchbar" placeholder=""
                               @onkeyup="FunctionsUseful.Search" @onfocus="FunctionsUseful.RemoveDate" @onblur="FunctionsUseful.AddDate" />
                        <label class="navbar-toggler" for="searchbar">
                            <span class="bi bi-search icon-bootstrap lupa"></span>
                        </label>
                    </div>
                </div>

                <div class="tool-bar-title">
                    <div class="workspace-info">
                        <span class="tool-bar-tile-text">Workspace</span>
                    </div>
                </div>

                <input id="more-button" name="more-button" type="checkbox" />
                <div class="toolbar-item-right">
                    @* <button class="navbar-toggler" type="button" @onclick='() => FunctionsUseful.SetClassItem("all-notes", "all-notes-grid")'>
                        <span class="bi bi-grid-fill icon-bootstrap"></span>
                    </button> *@
                    <label class="visu-tg-box">
                        <input type="checkbox" checked="@visualizationType" @onchange="ToggleVisualization">
                        <span class="bi bi-list-ul icon-bootstrap icon-list"></span>
                        <span class="bi bi-grid-fill icon-bootstrap icon-grid"></span>
                        <span class="slider"></span>
                    </label>

                    <label for="more-button">
                        <span class="bi bi-three-dots-vertical icon-bootstrap"></span>
                    </label>
                </div>
                
                <div class="more-menu-box">
                    <div class="more-menu">
                        <div class="menu-collapse-container">
                            <input id="ordenar-collapse" name="ordenar-collapse" type="checkbox" />
                            <label for="ordenar-collapse" class="more-menu-item">
                                <span class="bi bi-arrow-down-up icon-more-menu"></span>
                                <span class="item-span order">Ordenar<span class="bi bi-caret-down-fill icon-more-menu"></span></span>
                            </label>

                            <div class="menu-collapse-box">
                                <div class="menu-collapse" @onclick='() => AppData.MudarTipoDeAgrupamento("data")'>
                                    <span class="bi bi-calendar-event icon-more-menu"></span>
                                    <span>Por data</span>
                                </div>
                                <div class="menu-collapse" @onclick='() => AppData.MudarTipoDeAgrupamento("titulo")'>
                                    <span class="bi bi-fonts icon-more-menu"></span>
                                    <span>Por titulo</span>
                                </div>
                            </div>
                        </div>

                        <span class="separation"></span>
                        <div class="more-menu-item">
                            <span class="bi bi-gear icon-more-menu"></span>
                            <span class="item-span">Configuração</span>
                        </div>
                    </div>
                </div>
            </nav>
        </section>
    </div>
</header>

<div class="main-content">
    <nav id="side-bar-container" class="side-bar-container">
        <div class="side-bar-fade" onclick="functionsUseful.sidebarClose()"></div>
        <div class="top-items">
            <h2>
                <span>Áreas de Trabalho</span>
            </h2>
            <button id="close-side-bar" onclick="functionsUseful.sidebarClose()">
                <span class="bi bi-x-lg icon-bootstrap"></span>
            </button>
        </div>

        <div class="workspaces-container">
            @foreach (var workspace in workspaces)
            {
                if (showEditInterface && workspace.Id == workspaceSelecionado.Id)
                {
                    <div class="workspace-on-edit" @onclick="HideEditInterface"></div>
                    <WorkspaceEdit
                        WorkSpaceSelecionado="workspaceSelecionado"
                        OnSave="SaveEditWorkspace"/>
                }
                else
                {
                    <div class="workspace-info-container">
                        <a class="nav-link active" aria-current="page" href="/workspace/@workspace.Id">@workspace.Name</a>
                        <div class="workspace-tools-box">
                            <div class="workspace-tools">
                                <button class="navbar-toggler" type="button" @onclick="() => ShowEditInterface(workspace)">
                                    <span class="bi bi-pencil icon-bootstrap small"></span>
                                </button>

                                <button class="navbar-toggler" type="button" @onclick="() => DeleteWorkspace(workspace.Id)">
                                    <span class="bi bi-trash3 icon-bootstrap small trash"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="add-button-box">
            <button class="navbar-toggler" type="button" @onclick="AddWorkspace">
                <span class="bi bi-plus-square icon-bootstrap-add"></span>
            </button>
        </div>
    </nav>

    @Body
</div>
@code
{
    private List<Workspace> workspaces = new List<Workspace>();
    private Workspace? workspaceSelecionado = null;
    private bool visualizationType = false;
    private bool showEditInterface = false;

    protected override async Task OnInitializedAsync()
    {
        await AtualizarWorkspacesAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FunctionsUseful.DetectDevice();
        }
    }

    private async Task AtualizarWorkspacesAsync()
    {
        workspaces = await NoteService.GetAllWorkspaces();
    }

    private async Task AddWorkspace()
    {
        Workspace newWorkspace = new Workspace();
        await NoteService.AddWorkspace(newWorkspace);
        await AtualizarWorkspacesAsync();
    }

    private async Task ToggleVisualization(ChangeEventArgs e)
    {
        if (!visualizationType)
        {
            await FunctionsUseful.SetClassItem("all-notes", "all-notes-grid");
        }
        else
        {
            await FunctionsUseful.RemoveClassItem("all-notes", "all-notes-grid");
        }

        visualizationType = (bool)e.Value;
    }

    private async Task DeleteWorkspace(int id)
    {
        await NoteService.DeleteWorkspace(id);
        await AtualizarWorkspacesAsync();
    }

    private async Task ShowEditInterface(Workspace workspace)
    {
        workspaceSelecionado = workspace;
        showEditInterface = true;
    }

    private async Task HideEditInterface()
    {
        workspaceSelecionado = null;
        showEditInterface = false;
        await AtualizarWorkspacesAsync();
    }

    private async Task SaveEditWorkspace()
    {
        await NoteService.UpdateWorkspace(workspaceSelecionado);
        await HideEditInterface();
    }
}